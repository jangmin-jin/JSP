/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.46
 * Generated at: 2021-06-10 06:37:32 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Calendar;

public final class calender2_005fok_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Calendar");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("  <!--  calendar_ok.jsp -->\r\n");
      out.write("\r\n");

	request.setCharacterEncoding("utf-8");

	StringBuilder sbHtml = new StringBuilder();

	// 년 월 일
	// 년/ 월 : 넘어온 값을 받는다.
	int year = Integer.parseInt(request.getParameter("year"));
	int month = Integer.parseInt(request.getParameter("month"));
	// 일 : 총일수 계산
	
	// 시작요일
	int startDayOfWeek = 0;
	int endDayOfWeek = 0;
	// 끝나는 날짜 27, 28, 30, 31
	int endDay = 0;
	
	Calendar sDay = Calendar.getInstance();
	Calendar eDay = Calendar.getInstance();
	
	sDay.set(year, month-1, 1);
	eDay.set(year, month, 1-1);
	
	startDayOfWeek = sDay.get(Calendar.DAY_OF_WEEK); // 시작요일
	endDayOfWeek = eDay.get(Calendar.DAY_OF_WEEK); // 끝나는 요일
	endDay = eDay.get(Calendar.DATE); // 마지막 날짜. 30일까지면 30, 아니면 31
	
	sbHtml.append("<table border='1' width='200'>");
	sbHtml.append("<tr>").append("<td colspan='7'>");
	sbHtml.append(year).append("년&nbsp").append(month).append("월&nbsp").append("달력").append("<br>");
	sbHtml.append("</td>").append("</tr>");
	
	// 일요일 : 빨간색 / 토요일 : 파란색
	sbHtml.append("<tr>");
	sbHtml.append("<td>").append("<font color='red'>SU</font>").append("</td>");
	sbHtml.append("<td>").append("MO").append("</td>");
	sbHtml.append("<td>").append("TU").append("</td>");
	sbHtml.append("<td>").append("WE").append("</td>");
	sbHtml.append("<td>").append("TH").append("</td>");
	sbHtml.append("<td>").append("FR").append("</td>");
	sbHtml.append("<td>").append("<font color='blue'>SA</font>").append("</td>");
	sbHtml.append("</tr>");
	
	// 시작 일까지 빈칸 추가
	sbHtml.append( "<tr>" );
	for( int i=1 ; i<startDayOfWeek ; i++ ) {
		sbHtml.append( "<td></td>" );
	}
	
	int sunday = 0;
	for( int i=1, n=startDayOfWeek ; i<=endDay ; i++, n++ ) {
		// 일요일 (한주의 시작) - 빨간색
		if( n % 7 == 1 ) {
			sbHtml.append( "<tr>" );
			sbHtml.append( "<td><b><font color='red'>" + i + "</font></b></td>" );
			
		// 월~금 - 검정색
		} else if(n%7 != 1 && n%7 != 0){
			sbHtml.append( "<td><b>" + i + "</b></td>" );
			
		// 토요일 - 파란색
		} else if(n%7 == 0){
			sbHtml.append( "<td><b><font color='blue'>" + i + "</font></b></td>" );
			sbHtml.append( "</tr>" );
		}
	}

	// 끝날짜에 맞춰 빈칸 추가하기
	for( int i=startDayOfWeek ; i<6 ; i++ ) {
		sbHtml.append( "<td></td>" );
	}

	sbHtml.append( "</tr>" );
	sbHtml.append( "</table>" );

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.print(sbHtml.toString() );
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
